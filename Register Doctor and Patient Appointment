"use client";

import { useState } from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';

// Define form schema with Zod
const formSchema = z.object({
  userType: z.enum(['doctor', 'patient'], {
    required_error: "Please select Doctor or Patient",
  }),
  name: z.string().min(1, "Name is required").max(50),
  password:z.string().min(4, "Password is required").max(20),
  qualification: z.string().optional(),
  specialist: z.string().optional(),
  doctorconsult:z.string().optional(),
  city: z.string().min(1, "City is required"),
  phone:z.number().min(2,"Phone Number is Required"),
  availability: z.object({
    startTime: z.string().min(1, "Start time is required"),
    endTime: z.string().min(1, "End time is required"),
    period: z.enum(['AM', 'PM']),
  }).optional(),
}).superRefine((data, ctx) => {
  if (data.userType === 'doctor') {
    if (!data.qualification) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Qualification is required for doctors",
        path: ["qualification"]
      });
    }
    if (!data.specialist) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Specialist is required for doctors",
        path: ["specialist"]
      });
    }
    if (!data.availability) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Availability is required for doctors",
        path: ["availability"]
      });
    }
  }
  return data;
});

type FormData = z.infer<typeof formSchema>;

export default function RegisterForm() {
  const [showTimeModal, setShowTimeModal] = useState(false);
  const [timeMode, setTimeMode] = useState<'start' | 'end'>('start');
  
  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors },
  } = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      userType: undefined,
      availability: {
        period: 'AM',
      },
    },
  });

  const userType = watch('userType');

  const onSubmit: SubmitHandler<FormData> = (data) => {
    console.log(data);
    // Handle form submission here (e.g., API call)
    alert('Form submitted successfully!');
  };

  const handleTimeSelection = (time: string, field: 'startTime' | 'endTime') => {
    setValue(`availability.${field}`, time);
    setShowTimeModal(false);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-2xl p-8">
        <h3 className="text-2xl font-bold text-gray-800 mb-6 text-center text-primary">Registration Form</h3>
        
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* User Type Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Register as *
            </label>
            <div className="flex space-x-4">
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  value="doctor"
                  {...register('userType')}
                  className="h-4 w-4 text-indigo-600 focus:ring-indigo-500"
                />
                <span className="ml-2 text-gray-700">Doctor</span>
              </label>
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  value="patient"
                  {...register('userType')}
                  className="h-4 w-4 text-indigo-600 focus:ring-indigo-500"
                />
                <span className="ml-2 text-gray-700">Patient</span>
              </label>
            </div>
            {errors.userType && (
              <p className="mt-1 text-sm text-red-600">{errors.userType.message}</p>
            )}
          </div>

          {/* Name */}
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700">
              Full Name *
            </label>
            <input
              id="name"
              type="text"
              {...register('name')}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            />
            {errors.name && (
              <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
            )}
          </div>
          {/* Password */}
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
              Password *
            </label>
            <input
              id="password"
              type="text"
              {...register('password')}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            />
            {errors.password && (
              <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
            )}
          </div>

          {/* Qualification (only for doctors) */}
          {userType === 'doctor' && (
            <div>
              <label htmlFor="qualification" className="block text-sm font-medium text-gray-700">
                Qualification *
              </label>
              <input
                id="qualification"
                type="text"
                {...register('qualification')}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              />
              {errors.qualification && (
                <p className="mt-1 text-sm text-red-600">{errors.qualification.message}</p>
              )}
            </div>
          )}

          {/* Specialist (only for doctors) */}
          {userType === 'doctor' && (
            <div>
              <label htmlFor="specialist" className="block text-sm font-medium text-gray-700">
                Specialist *
              </label>
              <input
                id="specialist"
                type="text"
                {...register('specialist')}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              />
              {errors.specialist && (
                <p className="mt-1 text-sm text-red-600">{errors.specialist.message}</p>
              )}
            </div>
          )}
          {/* Doctor Name */}
          <div>
            <label htmlFor="DoctorConsult" className="block text-sm font-medium text-gray-700">
              Doctor Name to Consult *
            </label>
            <input
              id="doctorconsult"
              type="string"
              {...register('doctorconsult')}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            />
            {errors.doctorconsult && (
              <p className="mt-1 text-sm text-red-600">{errors.doctorconsult.message}</p>
            )}
          </div>
          {/* City */}
          <div>
            <label htmlFor="city" className="block text-sm font-medium text-gray-700">
              City *
            </label>
            <input
              id="city"
              type="text"
              {...register('city')}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            />
            {errors.city && (
              <p className="mt-1 text-sm text-red-600">{errors.city.message}</p>
            )}
          </div>
          {/* phone */}
          <div>
            <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
              Phone Number *
            </label>
            <input
              id="phone"
              type="number"
              {...register('phone')}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            />
            {errors.phone && (
              <p className="mt-1 text-sm text-red-600">{errors.phone.message}</p>
            )}
          </div>
          
          {/* Availability (only for doctors) */}
          {userType === 'doctor' && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Availability *
              </label>
              
              <div className="grid grid-cols-3 gap-4">
                {/* Start Time */}
                <div>
                  <label className="block text-xs text-gray-500 mb-1">Start Time</label>
                  <button
                    type="button"
                    onClick={() => {
                      setTimeMode('start');
                      setShowTimeModal(true);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-left focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  >
                    {watch('availability.startTime') || 'Select time'}
                  </button>
                  {errors.availability?.startTime && (
                    <p className="mt-1 text-sm text-red-600">{errors.availability.startTime.message}</p>
                  )}
                </div>
                
                {/* End Time */}
                <div>
                  <label className="block text-xs text-gray-500 mb-1">End Time</label>
                  <button
                    type="button"
                    onClick={() => {
                      setTimeMode('end');
                      setShowTimeModal(true);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-left focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  >
                    {watch('availability.endTime') || 'Select time'}
                  </button>
                  {errors.availability?.endTime && (
                    <p className="mt-1 text-sm text-red-600">{errors.availability.endTime.message}</p>
                  )}
                </div>
                
                {/* AM/PM */}
                <div>
                  <label className="block text-xs text-gray-500 mb-1">AM/PM</label>
                  <select
                    {...register('availability.period')}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  >
                    <option value="AM">AM</option>
                    <option value="PM">PM</option>
                  </select>
                </div>
              </div>
            </div>
          )}

          {/* Submit Button */}
          <div>
            <button
              type="submit"
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Register
            </button>
          </div>
        </form>
      </div>

      {/* Time Selection Modal */}
      {showTimeModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-xl w-80">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              Select {timeMode === 'start' ? 'Start' : 'End'} Time
            </h3>
            
            <div className="grid grid-cols-4 gap-2">
              {Array.from({ length: 12 }, (_, i) => {
                const hour = i + 1;
                return (
                  <button
                    key={hour}
                    type="button"
                    onClick={() => handleTimeSelection(hour.toString(), timeMode === 'start' ? 'startTime' : 'endTime')}
                    className="py-2 px-3 border border-gray-300 rounded-md hover:bg-indigo-50"
                  >
                    {hour}:00
                  </button>
                );
              })}
            </div>
            
            <div className="mt-4 flex justify-end">
              <button
                type="button"
                onClick={() => setShowTimeModal(false)}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
